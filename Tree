#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *left;
    struct node *right;
} node;

// Function to create a binary tree
node *create() {
    int x;
    printf("Enter data (-1 for no data): ");
    scanf("%d", &x);

    if (x == -1)
        return NULL;

    // Allocate memory for the new node
    node *p = (node *)malloc(sizeof(node));
    if (p == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    p->data = x;

    printf("Enter left child of %d:\n", x);
    p->left = create();

    printf("Enter right child of %d:\n", x);
    p->right = create();

    return p;
}

// Preorder traversal function
void preorder(node *t) {
    if (t != NULL) {
        printf("%d ", t->data);       // Visit the root
        preorder(t->left);           // Traverse the left subtree
        preorder(t->right);          // Traverse the right subtree
    }
}

// Inorder traversal function
void inorder(node *t) {
    if (t != NULL) {
        inorder(t->left);            // Traverse the left subtree
        printf("%d ", t->data);      // Visit the root
        inorder(t->right);           // Traverse the right subtree
    }
}

int main() {
    node *root;

    printf("Create the binary tree:\n");
    root = create();

    if (root == NULL) {
        printf("\nThe tree is empty.\n");
    } else {
        printf("\nThe preorder traversal of the tree is:\n");
        preorder(root);
        printf("\n");

        printf("\nThe inorder traversal of the tree is:\n");
        inorder(root);
        printf("\n");
    }

    return 0;
}
