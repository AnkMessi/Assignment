#include <stdio.h>
#include <stdlib.h>

struct node {
    int info;
    struct node *next;
};

struct node *start = NULL;

// Function declarations
void create();
void display();
void insert_begin();
void insert_end();
void insert_pos();
void delete_begin();
void delete_end();
void delete_pos();

int main() {
    int choice;
    while (1) {
        printf("\n\n--- Singly Linked List Operations ---\n");
        printf("1. Create\n");
        printf("2. Display\n");
        printf("3. Insert at the Beginning\n");
        printf("4. Insert at the End\n");
        printf("5. Insert at a Specific Position\n");
        printf("6. Delete from the Beginning\n");
        printf("7. Delete from the End\n");
        printf("8. Delete from a Specific Position\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                create();
                break;
            case 2:
                display();
                break;
            case 3:
                insert_begin();
                break;
            case 4:
                insert_end();
                break;
            case 5:
                insert_pos();
                break;
            case 6:
                delete_begin();
                break;
            case 7:
                delete_end();
                break;
            case 8:
                delete_pos();
                break;
            case 9:
                exit(0);
                break;
            default:
                printf("\nWrong choice! Please try again.\n");
                break;
        }
    }
    return 0;
}

// Create a new node
void create() {
    struct node *temp, *ptr;
    temp = (struct node *)malloc(sizeof(struct node));
    if (temp == NULL) {
        printf("\nOut of Memory Space\n");
        return;
    }
    printf("\nEnter the data value for the node: ");
    scanf("%d", &temp->info);
    temp->next = NULL;

    if (start == NULL) {
        start = temp;
    } else {
        ptr = start;
        while (ptr->next != NULL) {
            ptr = ptr->next;
        }
        ptr->next = temp;
    }
}

// Display the linked list
void display() {
    struct node *ptr;
    if (start == NULL) {
        printf("\nList is empty\n");
        return;
    }
    ptr = start;
    printf("\nThe List elements are: ");
    while (ptr != NULL) {
        printf("%d ", ptr->info);
        ptr = ptr->next;
    }
    printf("\n");
}

// Insert at the beginning
void insert_begin() {
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    if (temp == NULL) {
        printf("\nOut of Memory Space\n");
        return;
    }
    printf("\nEnter the data value for the node: ");
    scanf("%d", &temp->info);
    temp->next = start;
    start = temp;
}

// Insert at the end
void insert_end() {
    struct node *temp, *ptr;
    temp = (struct node *)malloc(sizeof(struct node));
    if (temp == NULL) {
        printf("\nOut of Memory Space\n");
        return;
    }
    printf("\nEnter the data value for the node: ");
    scanf("%d", &temp->info);
    temp->next = NULL;

    if (start == NULL) {
        start = temp;
    } else {
        ptr = start;
        while (ptr->next != NULL) {
            ptr = ptr->next;
        }
        ptr->next = temp;
    }
}

// Insert at a specific position
void insert_pos() {
    struct node *temp, *ptr;
    int i, pos;
    temp = (struct node *)malloc(sizeof(struct node));
    if (temp == NULL) {
        printf("\nOut of Memory Space\n");
        return;
    }
    printf("\nEnter the position for the new node: ");
    scanf("%d", &pos);
    printf("\nEnter the data value for the node: ");
    scanf("%d", &temp->info);
    temp->next = NULL;

    if (pos == 0) {
        temp->next = start;
        start = temp;
    } else {
        ptr = start;
        for (i = 0; i < pos - 1; i++) {
            if (ptr == NULL) {
                printf("\nPosition not found\n");
                return;
            }
            ptr = ptr->next;
        }
        temp->next = ptr->next;
        ptr->next = temp;
    }
}

// Delete from the beginning
void delete_begin() {
    struct node *ptr;
    if (start == NULL) {
        printf("\nList is empty\n");
        return;
    }
    ptr = start;
    start = start->next;
    printf("\nThe deleted element is: %d\n", ptr->info);
    free(ptr);
}

// Delete from the end
void delete_end() {
    struct node *temp, *ptr;
    if (start == NULL) {
        printf("\nList is empty\n");
        return;
    }
    if (start->next == NULL) {
        ptr = start;
        start = NULL;
    } else {
        ptr = start;
        while (ptr->next != NULL) {
            temp = ptr;
            ptr = ptr->next;
        }
        temp->next = NULL;
    }
    printf("\nThe deleted element is: %d\n", ptr->info);
    free(ptr);
}

// Delete from a specific position
void delete_pos() {
    struct node *temp, *ptr;
    int i, pos;

    if (start == NULL) {
        printf("\nList is empty\n");
        return;
    }
    printf("\nEnter the position of the node to be deleted: ");
    scanf("%d", &pos);

    if (pos == 0) {
        ptr = start;
        start = start->next;
    } else {
        ptr = start;
        for (i = 0; i < pos; i++) {
            if (ptr == NULL) {
                printf("\nPosition not found\n");
                return;
            }
            temp = ptr;
            ptr = ptr->next;
        }
        temp->next = ptr->next;
    }
    printf("\nThe deleted element is: %d\n", ptr->info);
    free(ptr);
}
